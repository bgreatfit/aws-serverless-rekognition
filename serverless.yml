service: aws-serverless-image-rekognition

frameworkVersion: "2.63.0"

plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

# DRY constants: define all compound/generated names in one place
# Override args are: .. defaults:
# --app_acroym          signed-uploader
# --s3_bucket           self:custom.app_acronym
# --s3_key_base         self:custom.stage
# --region              us-east-1
# --stage               test
# --deletion_policy     delete
custom:
  app_acronym: aws-serverless-image-rekognition
  default_stage: dev
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:custom.app_acronym}-${self:custom.stage}
  region: ${opt:region, self:provider.region}
  deletion_policy: Delete
  dynamodb_table: ${self:custom.stack_name}
  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}
  dynamodb_host: https://dynamodb.${self:custom.region}.amazonaws.com
  # Default to using app_acronym as bucket name
  s3_bucket: ${opt:s3_bucket, self:custom.app_acronym}
  # default to using ${stage} as key base path, keeps stages from namespace collisions
  s3_key_base: ${opt:s3_key_base, self:custom.stage}
  s3_bucket_arn: arn:aws:s3:::${self:custom.s3_bucket}
  s3_role_resource: ${self:custom.s3_bucket_arn}/${self:custom.s3_key_base}/*
  # Put this here rather than in code (presigned URL TTL)
  url_default_ttl: 60
  pythonRequirements:
    pythonBin: python3

provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  tracing:
    lambda: true
    apiGateway: true

  environment:
    DYNAMODB_TABLE: ${self:custom.dynamodb_table}
    DYNAMODB_HOST: ${self:custom.dynamodb_host}
    REGION: ${self:custom.region}
    S3_BUCKET: ${self:custom.s3_bucket}
    S3_KEY_BASE: ${self:custom.s3_key_base}
    URL_DEFAULT_TTL: ${self:custom.url_default_ttl}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: ${self:custom.dynamodb_arn}

    - Effect: Allow
      Action:
        - s3:*
      Resource: ${self:custom.s3_role_resource}
    - Effect: "Allow"
      Action:
        - "rekognition:*"
      Resource: "*"


functions:
  create:
    name: ${self:custom.stack_name}-create
    description: Generate a presigned URL for PUT upload
    handler: blob/create.create
    events:
      - http:
          path: blob
          method: post
          cors: true

  process_bob:
    handler: blob/process_bob.event
    name: ${self:custom.stack_name}-processBlob
    description: Called by s3 create/remove events to manage blob state in dynamo
    events:
      - s3:
          bucket: ${self:custom.s3_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:custom.s3_key_base}
      - s3:
          bucket: ${self:custom.s3_bucket}
          event: s3:ObjectRemoved:*
          rules:
            - prefix: ${self:custom.s3_key_base}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

# Comment blobDynamoDbTable if using existing table
    blobDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.deletion_policy}
      Properties:
        AttributeDefinitions:
         - AttributeName: blob_id
           AttributeType: S
        KeySchema:
          -
            AttributeName: blob_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.dynamodb_table}
